trigger:
- master

variables:
  _solution: 'src/CoreWCF.sln'
  _libraryProjects: 'src/CoreWCF.*/src/CoreWCF.*.csproj'
  _testProjects: '**/*.Tests.csproj'
  disable.coverage.autogenerate: 'true'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    strategy:
      matrix:
        Release:
          _buildConfig: 'Release'
        Debug:
          _buildConfig: 'Debug'
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk'
        inputs:
          packageType: sdk
          version: 3.1.101
          installationPath: $(Agent.ToolsDirectory)/dotnet

      # GitVersion task broken as of 2019-12-10. See https://github.com/GitTools/GitVersion/issues/1855
      # Installing the GitVersion tool and running it directly as a workaround
      - task: DotNetCoreCLI@2
        displayName: 'Install gitversion'
        inputs:
          command: 'custom'
          custom: 'tool'
          arguments: 'install -g gitversion.tool --version 5.1.2'

      - task: DotNetCoreCLI@2
        displayName: 'Gitversion setup'
        inputs:
          command: 'custom'
          custom: 'gitversion'
          arguments: '/output buildserver'
    
      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: 'build'
          projects: $(_libraryProjects)
          arguments: '--configuration $(_buildConfig) /t:restore'

      - task: DotNetCoreCLI@2
        displayName: Build $(_buildConfig)
        inputs:
          command: 'build'
          projects: $(_libraryProjects)
          arguments: '--no-restore --configuration $(_buildConfig)'
      - publish: $(System.DefaultWorkingDirectory)/bin
        artifact: $(_buildConfig)Build
        
- stage: Test
  displayName: Run Tests
  dependsOn: Build
  jobs:
  - job: TestRelease
    strategy:
      matrix:
        Windows_netcore2.1:
          imageName: 'windows-latest'
          targetFramework: 'netcoreapp2.1'
          testArgs: ''
        Windows_netcore3.0:
          imageName: 'windows-latest'
          targetFramework: 'netcoreapp3.0'
          testArgs: ''
        Windows_netfx:
          imageName: 'windows-latest'
          targetFramework: 'net472'
          testArgs: ''
        Linux_netcore2.1:
          imageName: 'ubuntu-latest'
          targetFramework: 'netcoreapp2.1'
          testArgs: '--filter Category!=WindowsOnly'
        Linux_netcore3.0:
          imageName: 'ubuntu-latest'
          targetFramework: 'netcoreapp3.0'
          testArgs: '--filter Category!=WindowsOnly'
    displayName: Test Release
    pool:
      vmImage: $(imageName)
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download build artifacts
      inputs:
        source: current
        artifact: ReleaseBuild
        path: $(System.DefaultWorkingDirectory)/bin
    - task: DotNetCoreCLI@2
      displayName: Restore packages
      inputs:
        command: 'build'
        projects: $(_testProjects)
        arguments: '--configuration Release /t:restore'
    - task: DotNetCoreCLI@2
      displayName: Build test projects
      inputs:
        command: 'build'
        projects: $(_testProjects)
        arguments: '--configuration Release --framework $(targetFramework)'
    - task: DotNetCoreCLI@2
      displayName: Run Tests
      timeoutInMinutes: 2
      inputs:
        command: 'test'
        projects: $(_testProjects)
        publishTestResults: true
        arguments: '--no-restore --no-build --configuration Release --framework $(targetFramework) $(testArgs)'
  - job: TestDebug
    strategy:
      matrix:
        Windows_netcore2.1:
          imageName: 'windows-latest'
          targetFramework: 'netcoreapp2.1'
          testArgs: ''
        Windows_netcore3.0:
          imageName: 'windows-latest'
          targetFramework: 'netcoreapp3.0'
          testArgs: ''
        Windows_netfx:
          imageName: 'windows-latest'
          targetFramework: 'net472'
          testArgs: ''
        Linux_netcore2.1:
          imageName: 'ubuntu-latest'
          targetFramework: 'netcoreapp2.1'
          testArgs: '--filter Category!=WindowsOnly'
        Linux_netcore3.0:
          imageName: 'ubuntu-latest'
          targetFramework: 'netcoreapp3.0'
          testArgs: '--filter Category!=WindowsOnly'
    displayName: Test Debug
    pool:
      vmImage: $(imageName)
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download build artifacts
      inputs:
        source: current
        artifact: DebugBuild
        path: $(System.DefaultWorkingDirectory)/bin
    - task: DotNetCoreCLI@2
      displayName: Restore packages
      inputs:
        command: 'build'
        projects: $(_testProjects)
        arguments: '--configuration Debug /t:restore'
    - task: DotNetCoreCLI@2
      displayName: Build test projects
      inputs:
        command: 'build'
        projects: $(_testProjects)
        arguments: '--configuration Debug --framework $(targetFramework)'
    - task: DotNetCoreCLI@2
      displayName: Run Tests
      timeoutInMinutes: 2
      inputs:
        command: 'test'
        projects: $(_testProjects)
        publishTestResults: true
        arguments: '--no-restore --no-build --configuration Debug --framework $(targetFramework) $(testArgs)'
  - job: CodeCoverage
    displayName: Code Coverage
    pool:
      vmImage: 'windows-latest'
    dependsOn: 
    - TestDebug
    - TestRelease
    steps:
    - script: set PATH=%PATH%;%USERPROFILE%\.dotnet\tools
      displayName: Add dotnet tools folder to path
    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install -g dotnet-reportgenerator-globaltool --version 4.3.9'
    - task: DownloadPipelineArtifact@2
      displayName: Download build artifacts
      inputs:
        source: current
        artifact: ReleaseBuild
        path: $(System.DefaultWorkingDirectory)/bin
    - task: DotNetCoreCLI@2
      displayName: Restore packages
      inputs:
        command: 'build'
        projects: $(_testProjects)
        arguments: '--configuration Release /t:restore'
    - task: DotNetCoreCLI@2
      displayName: Build test projects
      inputs:
        command: 'build'
        projects: $(_testProjects)
        arguments: '--configuration Release --framework netcoreapp2.1'
    - task: DotNetCoreCLI@2
      displayName: Run Tests with Coverage
      timeoutInMinutes: 2
      inputs:
        command: 'test'
        projects: $(_testProjects)
        publishTestResults: true
        arguments: '--no-restore --no-build --configuration Release --framework netcoreapp2.1 /p:CollectCoverage=true /p:CoverletOutputDir=$(Build.ArtifactStagingDirectory)/Coverage'
    - script: reportgenerator "-reports:$(Build.ArtifactStagingDirectory)/Coverage/*.xml" "-targetdir:$(Build.ArtifactStagingDirectory)/Coverage/Report" -reporttypes:HtmlInline_AzurePipelines;Cobertura;Badges
      displayName: 'Generate Coverage Report'
    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage report
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: $(Build.ArtifactStagingDirectory)/Coverage/Report/Cobertura.xml
        # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
        # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
        reportDirectory: $(Build.ArtifactStagingDirectory)/Coverage/Report/
- stage: Pack
  dependsOn: Test
  displayName: Create Packages
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  jobs:
  - job: Pack
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download build artifacts
      inputs:
        source: current
        artifact: ReleaseBuild
        path: $(System.DefaultWorkingDirectory)/bin
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'build'
        projects: $(_libraryProjects)
        arguments: '--configuration Release /t:restore'
    - task: DotNetCoreCLI@2
      displayName: Create packages
      inputs:
        command: 'pack'
        configurationToPack: Release
        searchPatternPack: $(_libraryProjects)
        outputDir: '$(Build.ArtifactStagingDirectory)/Packages'
        nobuild: true
        includesymbols: true
        arguments: '--no-restore'
    - task: NuGetAuthenticate@0
      displayName: NuGet Authenticate
    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        feedPublish: 'CoreWCF/CoreWCF'
        verbosityPush: Detailed
        packagesToPush: '$(Build.ArtifactStagingDirectory)/Packages/*.*'
        allowPackageConflicts: true
        publishPackageMetadata: true
