// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;

namespace CoreWCF.Http.Tests.Authorization;

public partial class AuthorizationIntegrationTests
{
    [ServiceContract]
    private interface ISecuredService
    {
        [OperationContract]
        string Default(string text);

        [OperationContract]
        string Read(string text);

        [OperationContract]
        Task<string> Write(string text);

        [OperationContract]
        Task<string> Generated(string text);
    }

    [ServiceBehavior(IncludeExceptionDetailInFaults = true)]
    private partial class SecuredService : ISecuredService
    {
        [Authorize]
        public string Default(string text) => text;

        [Authorize(Policy = Policies.Read)]
        public string Read(string text) => text;

        [Authorize(Policy = Policies.Write)]
        public Task<string> Write(string text) => Task.FromResult(text);

        [Authorize(Policy = Policies.Write)]
        public Task<string> Generated(string text, [Injected] HttpContext httpContext) => Task.FromResult(text);
    }

    // simulate what is generated by OperationParameterInjectorGenerator
    private partial class SecuredService
    {
        [AuthorizeAttribute(Policy = Policies.Write)]
        public Task<string> Generated(string text) => Task.FromResult(text);
    }

    private static class Policies
    {
        public const string Read = nameof(Read);
        public const string Write = nameof(Write);
    }

    private static class DefinedScopeValues
    {
        public const string Read = nameof(Read);
        public const string Write = nameof(Write);
    }
}
